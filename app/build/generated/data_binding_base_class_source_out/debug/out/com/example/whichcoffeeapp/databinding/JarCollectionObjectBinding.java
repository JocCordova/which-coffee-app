// Generated by view binder compiler. Do not edit!
package com.example.whichcoffeeapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.example.whichcoffeeapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class JarCollectionObjectBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView amountTag;

  @NonNull
  public final TextView coffeeChart;

  @NonNull
  public final TextView coffeeJar;

  @NonNull
  public final TextView coffeeJarNum;

  @NonNull
  public final TextView jarAmount;

  private JarCollectionObjectBinding(@NonNull RelativeLayout rootView, @NonNull TextView amountTag,
      @NonNull TextView coffeeChart, @NonNull TextView coffeeJar, @NonNull TextView coffeeJarNum,
      @NonNull TextView jarAmount) {
    this.rootView = rootView;
    this.amountTag = amountTag;
    this.coffeeChart = coffeeChart;
    this.coffeeJar = coffeeJar;
    this.coffeeJarNum = coffeeJarNum;
    this.jarAmount = jarAmount;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static JarCollectionObjectBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static JarCollectionObjectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.jar_collection_object, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static JarCollectionObjectBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      TextView amountTag = rootView.findViewById(R.id.amountTag);
      if (amountTag == null) {
        missingId = "amountTag";
        break missingId;
      }
      TextView coffeeChart = rootView.findViewById(R.id.coffeeChart);
      if (coffeeChart == null) {
        missingId = "coffeeChart";
        break missingId;
      }
      TextView coffeeJar = rootView.findViewById(R.id.coffeeJar);
      if (coffeeJar == null) {
        missingId = "coffeeJar";
        break missingId;
      }
      TextView coffeeJarNum = rootView.findViewById(R.id.coffeeJarNum);
      if (coffeeJarNum == null) {
        missingId = "coffeeJarNum";
        break missingId;
      }
      TextView jarAmount = rootView.findViewById(R.id.jarAmount);
      if (jarAmount == null) {
        missingId = "jarAmount";
        break missingId;
      }
      return new JarCollectionObjectBinding((RelativeLayout) rootView, amountTag, coffeeChart,
          coffeeJar, coffeeJarNum, jarAmount);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
